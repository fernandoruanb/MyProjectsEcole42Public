/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mini_serv.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fruan-ba <fruan-ba@42sp.org.br>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/08/10 10:17:47 by fruan-ba          #+#    #+#             */
/*   Updated: 2025/08/10 16:28:48 by fruan-ba         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <stdio.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <sys/select.h>
#include <stdbool.h>
#include <unistd.h>

typedef struct	s_server
{
	int	serverFD;
	int	port;
	int	next_id;
	int	fd_max;
	char	buffer[4098];
	int	clients[FD_SETSIZE];
	struct sockaddr_in	addr;
}	t_server;

static bool	checkPort(const char *port)
{
	while (*port)
	{
		if (*port < '0' || *port > '9')
			return (false);
		++port;
	}
	return (true);
}

static int	ft_atoi(const char *nptr, bool *err)
{
	int	index;
	int	result;

	index = 0;
	result = 0;
	if (nptr[0] == '\0' || !checkPort(nptr))
	{
		*err = true;
		return (0);
	}
	while (nptr[index] > '0' && nptr[index] < '9')
	{
		result *= 10;
		result += nptr[index] - '0';
		if (result > 65535)
		{
			*err = true;
			return (0);
		}
		++index;
	}
	return (result);
}

static void	connectServer(t_server *myServer)
{
	char	err[] = "Fatal error\n";

	myServer->serverFD = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
	if (myServer->serverFD == -1)
	{
		write(2, err, strlen(err));
		exit(1);
	}
	myServer->addr.sin_family = AF_INET;
	myServer->addr.sin_port = (myServer->port >> 8) | ((myServer->port & 0xFF) << 8);
	myServer->addr.sin_addr.s_addr = (1 << 24) | (0 << 16) | (0 << 8) | 127;

	if (bind(myServer->serverFD, (struct sockaddr*)&myServer->addr, sizeof(myServer->addr)) < 0)
	{
		printf("oi\n");
		write(2, err, strlen(err));
		close(myServer->serverFD);
		exit(1);
	}
	if (listen(myServer->serverFD, FD_SETSIZE) < 0)
	{
		printf("oi2\n");
		write(2, err, strlen(err));
		close(myServer->serverFD);
		exit(1);
	}
}

static void	broadcast(t_server *myServer, int owner, fd_set *active_fds, bool flag)
{
	int	fd;
	char	msg[4096];
	int	index = 0;

	while (index < strlen(msg))
	{
		msg[index] = '\0';
		++index;
	}
	if (flag == false)
	{
		fd = 0;
		while (fd <= myServer->fd_max)
		{
			if (fd == owner || fd == myServer->serverFD)
			{
				++fd;
				continue ;
			}
			if (FD_ISSET(fd, active_fds))
			{
				sprintf(msg, "client %d: %s\n", myServer->clients[owner], myServer->buffer);
				send(fd, msg, strlen(msg), 0);
			}
			++fd;
		}
	}
	else
	{
		fd = 0;
		while (fd <= myServer->fd_max)
		{
			if (fd == owner || fd == myServer->serverFD)
			{
				++fd;
				continue ;
			}
			if (FD_ISSET(fd, active_fds))
			{
				sprintf(msg, "server: client %d just left\n", myServer->clients[owner]);
				send(fd, msg, strlen(msg), 0);
			}
			++fd;
		}
	}
}

static void	findNewMax(t_server *myServer)
{
	int	fd;
	int	fd_max;

	fd = 0;
	fd_max = 0;
	while (fd < FD_SETSIZE)
	{
		if (myServer->clients[fd] > fd_max)
			fd_max = myServer->clients[fd];
		++fd;
	}
	if (fd_max < myServer->serverFD)
		fd_max = myServer->serverFD;
	else
		myServer->fd_max = fd_max;
	printf("Novo fd_max: %d\n", fd_max);
}

static void	clearBuffer(t_server *myServer)
{
	size_t	index;
	size_t	length = strlen(myServer->buffer);

	index = 0;
	while (index < length)
	{
		myServer->buffer[index] = '\0';
		++index;
	}
}

static void	startWebServer(t_server *myServer)
{
	fd_set	read_fds;
	fd_set	write_fds;
	fd_set	active_fds;
	int	clientFD;
	int	fd;
	char	err[] = "Fatal error\n";
	char	msg[1024];

	FD_ZERO(&active_fds);
	FD_SET(myServer->serverFD, &active_fds);
	myServer->fd_max = myServer->serverFD;

	fd = 0;
	while (1)
	{
		clearBuffer(myServer);
		fd = 0;
		read_fds = active_fds;
		write_fds = active_fds;

		if (select(myServer->fd_max + 1, &read_fds, &write_fds, NULL, NULL) < 0)
		{
			while (fd <= myServer->fd_max)
			{
				if (FD_ISSET(fd, &active_fds))
					close(fd);
				++fd;
			}
			write(2, err, strlen(err));
			exit(1);
		}
		while (fd <= myServer->fd_max)
		{
			if (FD_ISSET(fd, &read_fds))
			{
				if (fd == myServer->serverFD)
				{
					clientFD = accept(myServer->serverFD, NULL, NULL);
					if (clientFD >= 0)
					{
						FD_SET(clientFD, &active_fds);
						if (clientFD > myServer->fd_max)
							myServer->fd_max = clientFD;
						myServer->clients[clientFD] = myServer->next_id;
						sprintf(msg, "client %d: just arrived\n", myServer->next_id);
						write(1, msg, strlen(msg));
						myServer->next_id++;
					}
					else
					{
						fd = 0;
						while (fd <= myServer->fd_max)
						{
							if (FD_ISSET(fd, &active_fds))
								close(fd);
							++fd;
						}
						write(2, err, strlen(err));
						exit(1);
					}
				}
				else
				{
					ssize_t bytes = recv(fd, &myServer->buffer, sizeof(myServer->buffer) - 1, 0);
					if (bytes <= 0)
					{
						broadcast(myServer, fd, &active_fds, true);
						if (fd == myServer->fd_max)
							findNewMax(myServer);
						FD_CLR(fd, &active_fds);
						close(fd);
						myServer->next_id--;
						printf("nextID: %d\n", myServer->next_id);
					}
					else if (bytes > 0)
						broadcast(myServer, fd, &active_fds, false);
				}
			}
			++fd;
		}
	}
}

static void	initClientsTable(t_server *myServer)
{
	int	index = 0;

	while (index < FD_SETSIZE)
	{
		myServer->clients[index] = -1;
		++index;
	}
}

int	main(int argc, char **argv)
{
	t_server	myServer;
	char	msg[] = "Fatal error\n";
	bool	err;

	if (argc != 2)
	{
		char	err[] = "Wrong number of arguments\n";
		write(2, err, strlen(err));
		exit(1);
	}
	err = false;
	myServer.port = ft_atoi(argv[1], &err);
	if (err)
	{
		write(2, msg, strlen(msg));
		exit(1);
	}
	bzero(&myServer.addr, sizeof(myServer.addr));
	initClientsTable(&myServer);
	connectServer(&myServer);
	myServer.next_id = 0;
	startWebServer(&myServer);
	close(myServer.serverFD);
	return (0);
}
