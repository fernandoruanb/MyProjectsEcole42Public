1. Olá, Mundo OO
Descrição: Crie uma classe chamada Mensagem que contenha um método para imprimir "Olá, mundo!". No main(), instancie a classe e chame o método.

2. Calculadora Simples
Descrição: Crie uma classe Calculadora com métodos para somar, subtrair, multiplicar e dividir dois números. No main(), utilize um objeto dessa classe para exibir o resultado das quatro operações.

3. Retângulo (Getters e Setters)
Descrição: Crie uma classe Retangulo que tenha atributos de largura e altura. Forneça métodos de acesso (getters e setters) e um método para calcular a área. No main(), instancie a classe e mostre a área.

4. Conversão de Temperatura
Descrição: Crie uma classe Temperatura que armazene um valor em graus Celsius e possua métodos para converter para Fahrenheit e Kelvin. Utilize o objeto no main() para ler valor, converter e exibir.

5. Contador Simples
Descrição: Implemente uma classe Contador com um atributo interno que inicia em 0. Forneça métodos para incrementar, decrementar e retornar o valor atual do contador. Faça testes no main().

6. Hora do Dia
Descrição: Crie a classe Horario com atributos para hora, minuto e segundo, métodos para configurar (setHorario) e exibir (exibirHorario). Crie um objeto no main() e teste diferentes horários.

7. Ponto no Plano
Descrição: Crie uma classe Ponto2D com coordenadas x e y. Inclua métodos para configurar (set) e exibir (get) essas coordenadas, além de um método para calcular a distância até a origem (0,0).

8. Manipulação de Strings
Descrição: Crie uma classe ManipuladorString com um método que recebe uma std::string e retorna essa string em maiúsculas. No main(), teste com diferentes valores.

9. Conversor de Moedas
Descrição: Crie uma classe ConversorMoeda que converta um valor em reais para dólares e euros. Defina as taxas de câmbio como atributos ou constantes na classe. Teste o conversor no main().

10. Agenda de Contatos (Classe Básica)
Descrição: Crie uma classe Contato com atributos nome, telefone e email. Instancie alguns contatos no main() e exiba suas informações.

11. Pessoa (Construtores)
Descrição: Crie uma classe Pessoa com dois construtores: um construtor padrão (sem parâmetros) e um que receba o nome. Mostre o uso de ambos os construtores no main().

12. Número Complexo
Descrição: Crie uma classe Complexo com atributos parte real e imaginária. Forneça métodos para somar e subtrair dois números complexos. Demonstre no main().

13. Fatura (Invoice)
Descrição: Crie uma classe Fatura que contenha descrição do item, quantidade comprada e preço unitário. Calcule o valor total com base na quantidade e no preço unitário.

14. Vetor de Inteiros (Classe Básica)
Descrição: Crie a classe VetorInteiro com um array de 5 inteiros. Forneça métodos para atribuir valores, exibir e calcular a média dos valores.

15. Gerador de Senhas
Descrição: Crie uma classe GeradorSenha que tenha um método para gerar senhas aleatórias de tamanho fixo (por exemplo, 8 caracteres). Use rand() ou <random>.

16. Registro de Funcionários
Descrição: Crie a classe Funcionario com nome e salário. No main(), crie alguns objetos e exiba o salário anual de cada funcionário.

17. Conta Bancária (Introdução)
Descrição: Crie uma classe ContaBancaria com saldo inicial. Forneça métodos para depositar e sacar, garantindo que não permita saldo negativo.

18. Validador de CPF (Simples)
Descrição: Crie uma classe ValidadorCPF com um método para verificar se um CPF (recebido como string) tem 11 dígitos e não contém caracteres inválidos. Não precisa validar dígitos verificadores.

19. Calculadora de Juros Simples
Descrição: Crie a classe JurosSimples com método para calcular juros simples dados principal, taxa e tempo. No main(), peça dados ao usuário e exiba o valor final.

20. Conta Bancária (Uso de Construtores)
Descrição: Aprimore a classe ContaBancaria para ter um construtor que receba saldo inicial, além do construtor padrão. Mostre a diferença no main().

21. Estatísticas de Vetor
Descrição: Crie a classe EstatisticasVetor que recebe um array ou std::vector<int> e fornece métodos para retornar o valor mínimo, máximo e a média.

22. Gerenciador de Tarefas (Classe Básica)
Descrição: Crie uma classe Tarefa com título e status (concluída ou não). Instancie algumas tarefas, marcando algumas como concluídas e exibindo as informações.

23. Jogo de Dados (Classe Básica)
Descrição: Crie a classe Dado para simular o lançamento de um dado. O método lancar() deve gerar um número aleatório de 1 a 6. Teste no main() lançando diversas vezes.

24. Classe Estática Simples
Descrição: Crie uma classe Config que contenha um atributo estático (por exemplo, versão do software) e um método estático para exibir esse valor. Acesse no main() sem instanciar a classe.

25. Conversor de Distância
Descrição: Crie a classe Distancia com atributos para armazenar valor em quilômetros e métodos para converter para metros e milhas.

26. Herança Básica (Forma e Retângulo)
Descrição: Crie uma classe base Forma e uma classe derivada Retangulo que contenha largura e altura. Forneça métodos para calcular área e perímetro. No main(), instancie Retangulo e exiba seus dados.

27. Herança Básica (Pessoa e Estudante)
Descrição: Crie a classe base Pessoa com atributos nome e idade, e a classe derivada Estudante com atributo curso. Exiba as informações no main().

28. Destrutores (Registro Temporário)
Descrição: Crie uma classe que simule a criação de um arquivo temporário em seu construtor e a exclusão desse arquivo em seu destrutor. Apenas exiba mensagens simulando esse comportamento.

29. Polimorfismo (Animais)
Descrição: Crie uma classe base Animal com o método virtual fazerSom(). Crie classes derivadas Cachorro e Gato que sobreescrevam esse método. No main(), use ponteiros de Animal.

30. Funcionários Polimórficos
Descrição: Crie uma classe base Funcionario com método virtual calcularPagamento(). Crie classes derivadas FuncionarioHorista e FuncionarioMensalista que implementem o método de formas diferentes.

31. Cadastro de Produtos
Descrição: Crie a classe Produto com atributos como nome, preço e quantidade em estoque. Instancie diversos produtos no main() e exiba as informações.

32. Gerenciador de Livros
Descrição: Crie a classe Livro com título, autor e número de páginas. Faça um pequeno menu no main() para cadastrar livros e exibi-los.

33. Pilha de Inteiros (Stack)
Descrição: Crie a classe PilhaInt que use um std::vector<int> interno. Implemente métodos push(), pop() e top(). Teste no main().

34. Fila de Inteiros (Queue)
Descrição: Similar ao anterior, mas agora uma classe FilaInt. Implemente enqueue(), dequeue() e front().

35. Sistema de Vendas
Descrição: Crie uma classe Venda que armazene o nome do cliente, produto e valor da compra. Instancie e exiba as informações das vendas realizadas.

36. Classe Matriz (2D)
Descrição: Crie a classe Matriz que armazene uma matriz 2D de tamanho fixo (por ex., 3x3). Forneça métodos para atribuir valores e imprimir a matriz.

37. Enum e Classes (Dias da Semana)
Descrição: Crie um enum DiaSemana {SEGUNDA, TERCA, ...} e uma classe AgendaSemanal que utilize esse enum para representar compromissos. Teste no main().

38. Jogo de Adivinha (Classe Básica)
Descrição: Crie uma classe JogoAdivinha que gera um número aleatório de 1 a 100. Forneça um método para o usuário tentar adivinhar, retornando dicas (maior/menor).

39. Sistema de Notas
Descrição: Crie a classe Aluno com nota1 e nota2. Forneça método para calcular média final. Instancie alguns alunos e exiba suas médias.

40. Loteria Simples
Descrição: Crie a classe Loteria que sorteie 6 números aleatórios de 1 a 60 e os armazene num array ou std::vector. Implemente um método para exibir os números sorteados.

41. Classe Data
Descrição: Crie a classe Data com dia, mês e ano. Forneça métodos para avançar um dia, levando em conta a mudança de mês e ano.

42. Cálculo de Fatorial
Descrição: Crie a classe Matematica com um método estático fatorial(int n). Teste no main() calculando fatorial de alguns números.

43. Contador de Instâncias
Descrição: Crie uma classe ContadorObjetos que incrementa um contador estático a cada vez que um objeto é criado, e decrementa quando destruído. Exiba o contador no main().

44. Classe Pessoa (Sobrecarga de Métodos)
Descrição: Crie a classe Pessoa com métodos cumprimentar(). Sobrecarregue o método para também aceitar um parâmetro nome que personalize a saudação.

45. Jogo Pedra-Papel-Tesoura
Descrição: Crie a classe PedraPapelTesoura que simula uma jogada do computador e permite que o usuário jogue. Compare e exiba o resultado.

46. Sistema de Login
Descrição: Crie a classe Usuario com login e senha. No main(), permita cadastrar um usuário e depois pedir login e senha para validar o acesso.

47. Conta Bancária (Sobrecarga de Operadores)
Descrição: Aprimore a classe ContaBancaria para sobrecarregar o operador + para somar o saldo de duas contas, resultando em uma nova conta.

48. Vetor 3D (Sobrecarga de Operadores)
Descrição: Crie a classe Vetor3D com x, y, z e sobrecarregue o operador + para somar dois vetores. Demonstre no main().

49. Biblioteca com Polimorfismo (Livro, DVD)
Descrição: Crie a classe base ItemBiblioteca com método virtual mostrarInfo(). Crie classes derivadas Livro e DVD que exibam informações diferentes.

50. Template de Classe (Pilha)
Descrição: Crie uma classe template Pilha<T> que armazene elementos genéricos. Implemente push(), pop() e top(). Teste com tipos diferentes no main().

51. Template de Função (Max)
Descrição: Crie uma função template maximo(T a, T b) que retorne o maior dos dois. Demonstre no main() com int, float e double.

52. Classe Fracção (Operações)
Descrição: Crie a classe Fracao com numerador e denominador. Implemente métodos para somar, subtrair, multiplicar e dividir frações. Exiba o resultado.

53. Registro de Clientes (Agregação)
Descrição: Crie a classe Cliente e a classe Endereco. Relacione-as por agregação (um cliente tem um endereço). Mostre o uso no main().

54. Cadastro de Veículos (Composição)
Descrição: Crie a classe Carro, que possui um objeto Motor como atributo (composição). Exiba informações do carro e do motor no main().

55. Gerenciador de Alunos (std::vector)
Descrição: Crie uma classe Turma que armazene diversos objetos Aluno em um std::vector. Forneça métodos para adicionar aluno e exibir todos.

56. Sistema de Reservas de Hotel
Descrição: Crie a classe ReservaHotel com atributos nome do hóspede, tipo de quarto e número de noites. Instancie e exiba várias reservas.

57. Gerenciador de Arquivos (Exibição de Caminhos)
Descrição: Simule uma classe GerenciadorArquivos que liste arquivos em um diretório (não precisa implementar de fato, apenas simule armazenando nomes em um std::vector e exibindo).

58. Log de Eventos (Singleton)
Descrição: Crie uma classe Logger como Singleton, com um método registrarEvento(const std::string&). Demonstre o uso no main() registrando mensagens.

59. Sistema de Notas (Exceções)
Descrição: Altere o exercício de Sistema de Notas para lançar uma exceção se a nota informada estiver fora do intervalo 0-10. Trate a exceção no main().

60. Sistema de Compras (Tratamento de Exceções)
Descrição: Crie a classe Carrinho que possui um método para adicionar produtos e outro para finalizar a compra. Lance exceções caso o carrinho esteja vazio.

61. Relógio (Sobrecarga de Operadores <<)
Descrição: Crie a classe Relogio com hora, minuto, segundo. Sobrecarregue o operador << para imprimir a hora formatada. Demonstre no main().

62. Ponto 2D (Operadores de Comparação)
Descrição: Crie a classe Ponto2D e sobrecarregue os operadores == e != para comparar coordenadas x e y. Mostre uso no main().

63. Polimorfismo (Figuras Geométricas)
Descrição: Crie uma classe base Figura com método virtual calcularArea(). Implemente classes Circulo e Triangulo. No main(), calcule áreas polimorficamente.

64. Gerenciador de Música (Clonagem de Objetos)
Descrição: Crie uma classe base Midia com método virtual clone(). Implemente Musica que retorne uma cópia de si mesma em clone(). Demonstre duplicação de objetos no main().

65. Menu de Opções (Enum + Switch)
Descrição: Crie um enum Opcao {CADASTRAR, LISTAR, SAIR} e uma classe Menu com um método exibirMenu(). No main(), utilize switch para controlar o fluxo.

66. Álgebra Linear (Matriz e Vetor)
Descrição: Crie a classe Matriz (2D) e Vetor. Forneça um método para multiplicar matriz x vetor se as dimensões forem compatíveis. Exiba o resultado.

67. Sistema de Empréstimo de Livros
Descrição: Crie a classe Emprestimo que relaciona um Livro a um Usuario (ou Pessoa). Gerencie uma lista de empréstimos no main().

68. Lista Ligada (Implementação Simples)
Descrição: Crie a classe ListaLigada que armazene nós com valores inteiros. Implemente métodos de inserção e exibição. Não precisa de remoção.

69. Conversor de Tempo (Sobrecarga de Construtores)
Descrição: Crie a classe Tempo que pode ser instanciada passando horas, minutos e segundos separadamente ou um total de segundos. Converta internamente e exiba.

70. Jogo de Forca (Classe Básica)
Descrição: Crie a classe JogoForca que armazene uma palavra secreta e controle as tentativas do jogador. Exiba o estado (letras corretas/erradas).

71. Cadastro de Filmes (Herança e Polimorfismo)
Descrição: Crie a classe base Midia e a classe derivada Filme. Reutilize a ideia do ItemBiblioteca ou do Midia anterior, mas focando em atributos de filme (duração, diretor).

72. Banco de Dados Simples (Registros em Memória)
Descrição: Crie uma classe BancoDadosSimples que guarde registros (strings). Forneça métodos para inserir e listar registros. Teste no main().

73. Jogo de Cartas (Classe Baralho)
Descrição: Crie a classe Baralho que possua um std::vector<std::string> representando as cartas. Implemente um método para embaralhar (shuffle).

74. Gerador de Relatórios (Classe Abstrata)
Descrição: Crie uma classe abstrata Relatorio com método virtual puro gerar(). Implemente classes concretas RelatorioVendas e RelatorioEstoque.

75. Controle Remoto (Interface)
Descrição: Crie uma classe interface (pode ser classe abstrata com métodos virtuais puros) ControleRemoto com métodos ligar(), desligar(), trocarCanal(). Implemente em TV.

76. Polimorfismo de Sobrecarga (Funções)
Descrição: Crie a classe Operacoes com várias versões de um método calcular(), cada um lidando com diferentes tipos ou quantidades de parâmetros.

77. Gerenciador de Tarefas (Menu + std::vector)
Descrição: Aprimore o Tarefa para criar uma classe GerenciadorTarefas que armazene std::vector<Tarefa> e ofereça menu para adicionar, listar e concluir tarefas.

78. Sistema de Reservas de Passagem
Descrição: Crie a classe Passagem com atributos destino, data e preço. Faça um sistema que permita adicionar passagens e exibir todas.

79. Árvore Binária (Inserção e Impressão)
Descrição: Crie a classe ArvoreBinaria que insira valores inteiros (sem balanceamento). Forneça método para impressão em ordem simétrica (in-order).

80. Gerenciador de Funcionários (Polimorfismo Completo)
Descrição: Reutilize Funcionario base e FuncionarioHorista, FuncionarioMensalista. Crie uma classe RH que armazene objetos em um std::vector<Funcionario*>.

81. Editor de Texto Simples (Undo/Redo - Simulação)
Descrição: Crie uma classe EditorTexto com métodos para inserir texto, desfazer (undo) e refazer (redo). Armazene estados em std::vector ou pilhas (sem muito detalhamento).

82. Loja Virtual (Herança de Produto)
Descrição: Crie uma classe base Produto, derivadas ProdutoEletronico e ProdutoLivro. Armazene instâncias em um std::vector<Produto*> e exiba informações.

83. Sistema de Doação de Sangue
Descrição: Crie a classe Doador (nome, tipo sanguíneo) e uma classe BancoSangue com métodos para cadastrar doadores e listar por tipo sanguíneo.

84. Gerenciador de Conexões (Multithreading Simples)
Descrição: Simule uma classe Conexao que mantenha contagem de conexões ativas. Não é necessário implementar thread real, apenas simule métodos abrir() e fechar().

85. Contagem Regressiva (Thread Sleep Simulada)
Descrição: Crie a classe ContagemRegressiva com um método que imprima contagens de 10 até 1. Use std::this_thread::sleep_for se desejar, ou simule apenas as mensagens.

86. Grafo (Armazenamento em Lista de Adjacência)
Descrição: Crie a classe Grafo que armazene arestas em um std::vector<std::vector<int>>. Implemente métodos para inserir aresta e exibir a lista de adjacência.

87. Escrevendo em Arquivo (Classe de Log)
Descrição: Crie uma classe ArquivoLog que escreva mensagens em um arquivo texto. Utilize fstream. (Caso não queira criar arquivo real, apenas simule).

88. Lista de Compras (Classe Item + Funções)
Descrição: Crie a classe ItemCompra com nome e quantidade. Faça uma classe ListaCompras para gerenciar múltiplos itens. Exiba a lista final.

89. Sistema de Estoque (Map)
Descrição: Crie a classe Estoque que utilize std::map<std::string, int> para armazenar nome do produto e quantidade. Forneça métodos para adicionar e remover produtos.

90. Clima (Leitura de Dados)
Descrição: Crie uma classe Clima com atributos de temperatura, umidade e previsão (string). No main(), crie alguns objetos e exiba.

91. Ferramenta de Criptografia (Simples)
Descrição: Crie a classe CriptografiaSimples com método para cifrar uma string invertendo os caracteres ou aplicando uma cifra de deslocamento. Teste no main().

92. Sistema de Estatísticas de Texto
Descrição: Crie a classe EstatisticasTexto para contar número de caracteres, palavras e linhas de um texto dado. Peça ao usuário uma string e exiba as estatísticas.

93. Fila Prioritária (Simulação)
Descrição: Crie uma classe FilaPrioritaria que armazene elementos com prioridades (pode ser std::priority_queue). Insira e remova alguns elementos no main().

94. Simulador de Cofrinho
Descrição: Crie a classe Cofrinho com um atributo para o total de dinheiro. Métodos para depositar moedas de diferentes valores e para quebrar o cofre (exibir total).

95. Editor de Vetores (Funções de Algoritmo)
Descrição: Crie uma classe EditorVetor que use algoritmos como std::sort, std::reverse. No main(), teste com um std::vector<int>.

96. Sistema de Consulta Médica
Descrição: Crie a classe Consulta com atributos de paciente, médico e data. Armazene e exiba consultas em um std::vector.

97. Modelo de MVC Simples
Descrição: Crie uma classe Model que armazene um dado simples, uma classe View que exiba esse dado e uma classe Controller que altere o dado. No main(), simule a interação.

98. Carrinho de Compras (Sobrecarga de Operador <<)
Descrição: Crie a classe Carrinho que armazena itens e quantidades. Sobrecarregue o operador << para exibir o conteúdo do carrinho.

99. Sistema de Mensagens (Relacionamento entre Objetos)
Descrição: Crie uma classe Usuario e outra Mensagem. Permita que um usuário envie mensagens para outro, armazenando-as em um contêiner no usuário destinatário.

100. Projeto Final: Sistema de Biblioteca Simplificado
Descrição: Combine vários conceitos:

Crie classes Livro, Usuario e Emprestimo.

Gerencie std::vector<Livro> e std::vector<Usuario>.

Permita cadastro de livros e usuários, e realize empréstimos (associando livro e usuário).

Trate possíveis exceções (livro não encontrado, usuário não encontrado, etc.).

Exiba relatórios de quem pegou qual livro.

Sugestão de uso:

A ordem de exercícios é apenas uma recomendação. Sinta-se à vontade para reorganizar conforme sua necessidade ou interesse.

Experimente documentar o que você aprendeu em cada exercício, anotando dificuldades e soluções.

Tente adicionar recursos extras aos projetos, indo além do básico, sempre que possível.

Bom estudo e boa prática!
